<?php
/**
 * This file is designed to be the new 'server' of sites using StaticPublisher.
 * to use this, you need to modify your .htaccess to point all requests to
 * static-main.php, rather than main.php. This file also allows for using
 * static publisher with the subsites module.
 *
 * If you are using StaticPublisher+Subsites, set the following in _config.php:
 *   FilesystemPublisher::$domain_based_caching = true;
 * and added main site host mapping in subsites/host-map.php after everytime a new subsite is created or modified 
 * 
 * If you are not using subsites, the host-map.php file will not exist (it is
 * automatically generated by the Subsites module) and the cache will default
 * to no subdirectory.
 */

// Define system paths (copied from Core.php)
if(!defined('BASE_PATH')) {
	// Assuming that this file is lower down in a module
	define('BASE_PATH', rtrim(dirname(dirname(__FILE__)), DIRECTORY_SEPARATOR));
	define('TEMP_FOLDER', BASE_PATH . '/silverstripe-cache');
}

// Optional settings for FilesystemPublisher::$domain_based_mapping=TRUE
$hostmapLocation = BASE_PATH.'/subsites/host-map.php'; 
$homepageMapLocation = BASE_PATH . '/assets/_homepage-map.php';

if (file_exists(dirname(__FILE__) . '/cache-main.conf.php')) {
	include_once(dirname(__FILE__) . '/cache-main.conf.php');
}

$url = $_GET['url'];

$cacheEnabled = true;
if (strpos($url, '/admin/') === 0 || strpos($url, '/Security/') === 0) {
	$cacheEnabled = false;
}

if (
	$cacheEnabled
	&& empty($_COOKIE['bypassStaticCache'])
	// No GET params other than cache relevant config is passed (e.g. "?stage=Stage"),
	// which would mean that we have to bypass the cache
	&& count(array_diff(array_keys($_GET), array('url', 'cacheSubdir'))) == 0
	// Request is not POST (which would have to be handled dynamically)
	&& count($_POST) == 0
) {
	
	if(!defined('BASE_URL')) {
		// Determine the base URL by comparing SCRIPT_NAME to SCRIPT_FILENAME and getting the common elements
		if(substr($_SERVER['SCRIPT_FILENAME'],0,strlen(BASE_PATH)) == BASE_PATH) {
			$urlSegmentToRemove = substr($_SERVER['SCRIPT_FILENAME'],strlen(BASE_PATH));
			if(substr($_SERVER['SCRIPT_NAME'],-strlen($urlSegmentToRemove)) == $urlSegmentToRemove) {
				$baseURL = substr($_SERVER['SCRIPT_NAME'], 0, -strlen($urlSegmentToRemove));
				define('BASE_URL', rtrim($baseURL, DIRECTORY_SEPARATOR));
			}
		}
	}
	
	// Remove base folders from the URL if webroot is hosted in a subfolder
	if (defined('BASE_URL') && substr(strtolower($url), 0, strlen(BASE_URL)) == strtolower(BASE_URL)) {
		$url = substr($url, strlen(BASE_URL));
	}

	// this is done because subsites doesn't handle www. very well at all :/
	$host = str_replace('www.', '', $_SERVER['HTTP_HOST']);
	
	if (file_exists($hostmapLocation)) {
		include_once $hostmapLocation;
		$subsiteHostmap['default'] = isset($subsiteHostmap['default']) ? $subsiteHostmap['default'] : '';
		$remapped = trim((isset($subsiteHostmap[$host]) ? $subsiteHostmap[$host] .'/' : $subsiteHostmap['default']) . '', '/');
	} else {
		$remapped = '';
	}

	// Look for the file in the cachedir
	$file = trim($url, '/');
	$file = $file ? $file : 'index';

	// Route to the 'correct' index file (if applicable)
	if ($file == 'index' && file_exists($homepageMapLocation)) {
		include_once $homepageMapLocation;
		$file = isset($homepageMap[$_SERVER['HTTP_HOST']]) ? $homepageMap[$_SERVER['HTTP_HOST']] : $file;
	}

	// Find file by extension (either *.html or *.php)
	$file = preg_replace('/[^a-zA-Z0-9\/\-_]/si', '-', $file);

	$key = $remapped . '/' . $file . '.html';

	$cache = get_cache('publisher');

	$object = $cache->get($key);
	if ($object) {
		header('X-SilverStripe-Cache: hit at '.@date('r'));

		// disabled the following for now; we need the 304 for now as we aren't
		// completely reliable on how max-age goes out. 
//		if($object->Age > 0) {
//			header("Cache-Control: max-age=" . $object->Age);
//			header("Pragma:");
//		} else {
//			header("Cache-Control: no-cache, max-age=0, must-revalidate");
//		}
		
		// force page revalidation; the 304 below will be sent if the content hasn't changed
		header("Cache-Control: no-cache, max-age=0, must-revalidate");

		header("Expires: " . gmdate('D, d M Y H:i:s', time() + $object->Age) . ' GMT');
		header("Last-modified: " . gmdate('D, d M Y H:i:s', strtotime($object->LastModified)) . ' GMT');
		
		// if there's an if-modified-since header 
		if(isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])) {
			if(strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) >= strtotime($object->LastModified)) {
				header("Last-modified: " . gmdate('D, d M Y H:i:s', strtotime($object->LastModified)) . ' GMT', true, 304);
				exit;
			}
		}
		
		if (isset($object->ContentType) && strlen($object->ContentType)) {
			header('Content-type: ' . $object->ContentType);
		}

		// check for any cached values
		$content = preg_replace('|<base href="(https?)://(.*?)/"|', '<base href="$1://' . $_SERVER['HTTP_HOST'] . '/"', $object->Content);
		echo preg_replace_callback('/<!--SimpleCache::(.*?)-->/', 'get_cached_value', $content);
	} else {
		if (isset($cache_urls) && $expiry = path_matches($host . $url, $cache_urls)) {
			// No cache hit... fallback to dynamic routing
			ob_start();
			$GLOBALS['__cache_publish'] = true;
			include dirname(__FILE__).'/../sapphire/main.php';
			$toCache = new stdClass();
			$toCache->Content = ob_get_clean();
			$toCache->LastModified = date('Y-m-d H:i:s');
			$toCache->Age = $expiry;

			// store the content for this 
			get_cache('publisher')->store($key, $toCache, $expiry);
			
			header('X-SilverStripe-Cache: miss-gen at '.@date('r') . ' on ' . $key);
			echo preg_replace_callback('/<!--SimpleCache::(.*?)-->/', 'get_cached_value', $toCache->Content);
		} else {
			header('X-SilverStripe-Cache: miss at '.@date('r') . ' on ' . $key);
			// No cache allowed or wanted
			include dirname(__FILE__).'/../sapphire/main.php';
		}
	}
} else {
	// Fall back to dynamic generation via normal routing if caching has been explicitly disabled
	include dirname(__FILE__).'/../sapphire/main.php';
}

function get_cached_value($matches) {
	$params = @explode(',', $matches[1]);
	if ($params && count($params)) {
		$key = array_shift($params);
		$cache = call_user_func_array(array('SimpleCache', 'get_cache'), $params);
		return $cache->get($key);
	}
}

function path_matches($url, $routes) {
	foreach ($routes as $route => $expiry) {
		if (preg_match('|' . $route . '|', $url, $matches)) {
			return $expiry;
		}
	}
}

function get_cache($name) {
	include_once(BASE_PATH .'/simplecache/code/services/SimpleCache.php');
	if (file_exists(dirname(__FILE__) . '/caches.conf.php')) {
		include_once dirname(__FILE__) . '/caches.conf.php';
	}
	$cache = SimpleCache::get_cache($name);
	return $cache;
}